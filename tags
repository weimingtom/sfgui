!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Activate	textedit.cpp	/^void sfgui::TextEdit::Activate() {$/;"	f	class:sfgui::TextEdit
AddChar	textedit.cpp	/^void sfgui::TextEdit::AddChar(char ch) {$/;"	f	class:sfgui::TextEdit
BackgroundClicked	object.hpp	/^	enum ButtonStates {BackgroundNormal, BackgroundClicked, BackgroundHover}; $/;"	e	enum:sfgui::Object::ButtonStates
BackgroundHover	object.hpp	/^	enum ButtonStates {BackgroundNormal, BackgroundClicked, BackgroundHover}; $/;"	e	enum:sfgui::Object::ButtonStates
BackgroundNormal	object.hpp	/^	enum ButtonStates {BackgroundNormal, BackgroundClicked, BackgroundHover}; $/;"	e	enum:sfgui::Object::ButtonStates
Bottom	margin.hpp	/^	float Bottom; \/\/\/< Bottom margin value$/;"	m	struct:sfgui::Margin
Button	button.cpp	/^sfgui::Button::Button(sf::RenderWindow *parentWindow) : Object(parentWindow) {$/;"	f	class:sfgui::Button
Button	button.cpp	/^sfgui::Button::Button(sf::RenderWindow *parentWindow, std::string themePath) : Object(parentWindow, themePath) {$/;"	f	class:sfgui::Button
Button	button.hpp	/^class Button : public Object$/;"	c	namespace:sfgui
ButtonStates	object.hpp	/^	enum ButtonStates {BackgroundNormal, BackgroundClicked, BackgroundHover}; $/;"	g	class:sfgui::Object
Center	constantes.hpp	/^		Center \/\/\/< Object is centered$/;"	e	enum:sfgui::__anon1
CheckEvent	checkbox.cpp	/^void sfgui::Checkbox::CheckEvent(sf::Event Event) {$/;"	f	class:sfgui::Checkbox
CheckEvent	object.cpp	/^void sfgui::Object::CheckEvent(sf::Event Event) {$/;"	f	class:sfgui::Object
CheckEvent	slider.cpp	/^void Slider::CheckEvent(sf::Event ) {$/;"	f	class:Slider
CheckEvent	textedit.cpp	/^void sfgui::TextEdit::CheckEvent(sf::Event event) {$/;"	f	class:sfgui::TextEdit
Checkbox	checkbox.cpp	/^sfgui::Checkbox::Checkbox(sf::RenderWindow *parentWindow) : Object(parentWindow) {$/;"	f	class:sfgui::Checkbox
Checkbox	checkbox.cpp	/^sfgui::Checkbox::Checkbox(sf::RenderWindow *parentWindow, std::string text, bool state) : sfgui::Object(parentWindow) {$/;"	f	class:sfgui::Checkbox
Checkbox	checkbox.hpp	/^	class Checkbox : public sfgui::Object$/;"	c	namespace:sfgui
Clicked	checkbox.cpp	/^void sfgui::Checkbox::Clicked() {$/;"	f	class:sfgui::Checkbox
Clicked	object.cpp	/^void sfgui::Object::Clicked() {$/;"	f	class:sfgui::Object
Deactivate	textedit.cpp	/^void sfgui::TextEdit::Deactivate() {$/;"	f	class:sfgui::TextEdit
DelChar	textedit.cpp	/^void sfgui::TextEdit::DelChar(int pos) {$/;"	f	class:sfgui::TextEdit
Error	error.hpp	/^    Error(const char * phrase="") throw() : m_phrase(phrase)$/;"	f	class:sfgui::Error
Error	error.hpp	/^class Error: public std::exception$/;"	c	namespace:sfgui
GetText	object.cpp	/^std::string sfgui::Object::GetText() {$/;"	f	class:sfgui::Object
GetTextColor	object.cpp	/^sf::Color sfgui::Object::GetTextColor() {$/;"	f	class:sfgui::Object
GetTextFont	object.cpp	/^sf::Font sfgui::Object::GetTextFont() {$/;"	f	class:sfgui::Object
GetTextSize	object.cpp	/^float sfgui::Object::GetTextSize() {$/;"	f	class:sfgui::Object
IsChecked	checkbox.cpp	/^bool sfgui::Checkbox::IsChecked() {$/;"	f	class:sfgui::Checkbox
Left	constantes.hpp	/^	enum { Left, \/\/\/< Object is on the left$/;"	e	enum:sfgui::__anon1
Left	margin.hpp	/^	float Left; \/\/\/< Left margin value$/;"	m	struct:sfgui::Margin
ManageMouse	checkbox.cpp	/^void sfgui::Checkbox::ManageMouse() {$/;"	f	class:sfgui::Checkbox
ManageMouse	object.cpp	/^void sfgui::Object::ManageMouse() {$/;"	f	class:sfgui::Object
Margin	margin.hpp	/^struct Margin$/;"	s	namespace:sfgui
Mode	textedit.hpp	/^	enum Mode { ModePassword, ModeNormal };$/;"	g	class:sfgui::TextEdit
ModeNormal	textedit.hpp	/^	enum Mode { ModePassword, ModeNormal };$/;"	e	enum:sfgui::TextEdit::Mode
ModePassword	textedit.hpp	/^	enum Mode { ModePassword, ModeNormal };$/;"	e	enum:sfgui::TextEdit::Mode
MouseHover	object.cpp	/^void sfgui::Object::MouseHover() {$/;"	f	class:sfgui::Object
MouseNotHover	object.cpp	/^void sfgui::Object::MouseNotHover() {$/;"	f	class:sfgui::Object
Move	object.cpp	/^void sfgui::Object::Move(float x, float y) {$/;"	f	class:sfgui::Object
Object	object.cpp	/^sfgui::Object::Object(sf::RenderWindow *parentWindow) : m_parentRenderWindow(parentWindow) {$/;"	f	class:sfgui::Object
Object	object.cpp	/^sfgui::Object::Object(sf::RenderWindow *parentWindow, std::string themePath) : m_parentRenderWindow(parentWindow) {$/;"	f	class:sfgui::Object
Object	object.hpp	/^class Object : public sf::Sprite$/;"	c	namespace:sfgui
Resize	textedit.cpp	/^void sfgui::TextEdit::Resize(float w, float h) {$/;"	f	class:sfgui::TextEdit
Right	constantes.hpp	/^		Right, \/\/\/< Object is on the right $/;"	e	enum:sfgui::__anon1
Right	margin.hpp	/^	float Right; \/\/\/< Right margin value$/;"	m	struct:sfgui::Margin
SetActivatedCallback	textedit.cpp	/^void sfgui::TextEdit::SetActivatedCallback(void(*activatedCallback)()) {$/;"	f	class:sfgui::TextEdit
SetBackground	object.cpp	/^void sfgui::Object::SetBackground(int background) {$/;"	f	class:sfgui::Object
SetCharDeletedCallback	textedit.cpp	/^void sfgui::TextEdit::SetCharDeletedCallback(void(*callback)(unsigned int, char)) {$/;"	f	class:sfgui::TextEdit
SetCheckedCallback	checkbox.cpp	/^void sfgui::Checkbox::SetCheckedCallback(void(*checkedCallback)()) {$/;"	f	class:sfgui::Checkbox
SetClickCallback	object.cpp	/^void sfgui::Object::SetClickCallback(void(*clickCallBack)()) {$/;"	f	class:sfgui::Object
SetDeactivatedCallback	textedit.cpp	/^void sfgui::TextEdit::SetDeactivatedCallback(void(*deactivatedCallback)()) {$/;"	f	class:sfgui::TextEdit
SetMargin	margin.cpp	/^void sfgui::Margin::SetMargin(float margin) {$/;"	f	class:sfgui::Margin
SetMode	textedit.cpp	/^void sfgui::TextEdit::SetMode(int mode) {$/;"	f	class:sfgui::TextEdit
SetMouseHoverCallback	object.cpp	/^void sfgui::Object::SetMouseHoverCallback(void(*mouseHoverCallback)()) {$/;"	f	class:sfgui::Object
SetPosition	object.cpp	/^void sfgui::Object::SetPosition(float x, float y) {$/;"	f	class:sfgui::Object
SetReturnPressedCallback	textedit.cpp	/^void sfgui::TextEdit::SetReturnPressedCallback(void(*returnPressedCallback)()) {$/;"	f	class:sfgui::TextEdit
SetState	checkbox.cpp	/^void sfgui::Checkbox::SetState(bool state) {$/;"	f	class:sfgui::Checkbox
SetText	object.cpp	/^void sfgui::Object::SetText(std::string text) {$/;"	f	class:sfgui::Object
SetText	textedit.cpp	/^void sfgui::TextEdit::SetText(std::string text) {$/;"	f	class:sfgui::TextEdit
SetTextAlignment	object.cpp	/^void sfgui::Object::SetTextAlignment(int al) {$/;"	f	class:sfgui::Object
SetTextBottomMargin	object.cpp	/^void sfgui::Object::SetTextBottomMargin(float margin) {$/;"	f	class:sfgui::Object
SetTextChangedCallback	textedit.cpp	/^void sfgui::TextEdit::SetTextChangedCallback(void(*textChangedCallback)(std::string &)) {$/;"	f	class:sfgui::TextEdit
SetTextColor	object.cpp	/^void sfgui::Object::SetTextColor(sf::Color &color) {$/;"	f	class:sfgui::Object
SetTextFont	object.cpp	/^void sfgui::Object::SetTextFont(sf::Font &font) {$/;"	f	class:sfgui::Object
SetTextLeftMargin	object.cpp	/^void sfgui::Object::SetTextLeftMargin(float margin) {$/;"	f	class:sfgui::Object
SetTextMargin	object.cpp	/^void sfgui::Object::SetTextMargin(float margin) {$/;"	f	class:sfgui::Object
SetTextRightMargin	object.cpp	/^void sfgui::Object::SetTextRightMargin(float margin) {$/;"	f	class:sfgui::Object
SetTextSize	object.cpp	/^void sfgui::Object::SetTextSize(float size) {$/;"	f	class:sfgui::Object
SetTextTopMargin	object.cpp	/^void sfgui::Object::SetTextTopMargin(float margin) {$/;"	f	class:sfgui::Object
SetTheme	object.cpp	/^void sfgui::Object::SetTheme(std::string dir) {$/;"	f	class:sfgui::Object
SetToolTip	object.cpp	/^void sfgui::Object::SetToolTip(std::string tooltipMessage) {$/;"	f	class:sfgui::Object
SetUncheckedCallback	checkbox.cpp	/^void sfgui::Checkbox::SetUncheckedCallback(void(*uncheckedCallback)()) {$/;"	f	class:sfgui::Checkbox
Show	checkbox.cpp	/^void sfgui::Checkbox::Show() {$/;"	f	class:sfgui::Checkbox
Show	object.cpp	/^void sfgui::Object::Show() {$/;"	f	class:sfgui::Object
Show	textedit.cpp	/^void sfgui::TextEdit::Show() {$/;"	f	class:sfgui::TextEdit
Slider	slider.cpp	/^Slider::Slider(sf::RenderWindow *parent) : sfgui::Object(parent) {$/;"	f	class:Slider
Slider	slider.hpp	/^class Slider : public sfgui::Object$/;"	c
Sprite	main.cpp	/^sfgui::Button Sprite(&App,"data\/button-test\/");$/;"	v
TextEdit	textedit.cpp	/^sfgui::TextEdit::TextEdit(sf::RenderWindow *parentWindow) : Object(parentWindow) {$/;"	f	class:sfgui::TextEdit
TextEdit	textedit.hpp	/^class TextEdit : public sfgui::Object {$/;"	c	namespace:sfgui
Top	margin.hpp	/^	float Top; \/\/\/< Top margin value$/;"	m	struct:sfgui::Margin
_HOME_ARNAUD_PROGRAMMATION_SFML_SFGUI_SLIDER_HPP__	slider.hpp	35;"	d
__BUTTON_HPP__	button.hpp	24;"	d
__CHECKBOX_HPP__	checkbox.hpp	33;"	d
__CONSTANTES_HPP__	constantes.hpp	34;"	d
__ERROR_HPP__	error.hpp	2;"	d
__MARGIN_HPP__	margin.hpp	33;"	d
__OBJECT_HPP__	object.hpp	24;"	d
__TEXTEDIT_HPP__	textedit.hpp	24;"	d
activated	textedit.cpp	/^void sfgui::TextEdit::activated() {$/;"	f	class:sfgui::TextEdit
charDeleted	textedit.cpp	/^void sfgui::TextEdit::charDeleted(unsigned int pos, char ch) {$/;"	f	class:sfgui::TextEdit
checked	checkbox.cpp	/^void sfgui::Checkbox::checked(){$/;"	f	class:sfgui::Checkbox
checkedCallback	main.cpp	/^void checkedCallback(){$/;"	f
deactivated	textedit.cpp	/^void sfgui::TextEdit::deactivated() {$/;"	f	class:sfgui::TextEdit
generalInit	button.cpp	/^void sfgui::Button::generalInit() {$/;"	f	class:sfgui::Button
generalInit	object.cpp	/^void sfgui::Object::generalInit() {$/;"	f	class:sfgui::Object
m_BackgroundImg	object.hpp	/^	sf::Image *m_BackgroundImg; \/\/\/< Curent background image$/;"	m	class:sfgui::Object
m_Event	object.hpp	/^	sf::Event m_Event; \/\/\/< Copy of the current sfml event $/;"	m	class:sfgui::Object
m_Images	object.hpp	/^	std::map<int, sf::Image *> m_Images;$/;"	m	class:sfgui::Object
m_activatedCallback	textedit.hpp	/^	void (*m_activatedCallback)(); \/\/< Callback called when the TextEdit is activated$/;"	m	class:sfgui::TextEdit
m_charDeletedCallback	textedit.hpp	/^	void (*m_charDeletedCallback)(unsigned int, char); \/\/< When a character is deleted, use this callback$/;"	m	class:sfgui::TextEdit
m_checkedCallback	checkbox.hpp	/^		void (*m_checkedCallback)(); $/;"	m	class:sfgui::Checkbox
m_clickCallback	object.hpp	/^	void (*m_clickCallback)(); \/\/\/< Pointer to the click callback function$/;"	m	class:sfgui::Object
m_cursorPosition	textedit.hpp	/^	unsigned int m_cursorPosition; \/**< Position of the cursor in the string **\/$/;"	m	class:sfgui::TextEdit
m_deactivatedCallback	textedit.hpp	/^	void (*m_deactivatedCallback)(); \/\/< Callback called when the TextEdit is deactivated$/;"	m	class:sfgui::TextEdit
m_font	object.hpp	/^	sf::Font *m_font;$/;"	m	class:sfgui::Object
m_itemActive	textedit.hpp	/^	bool m_itemActive; \/**< If true, user can enter text (textedit has focus), if$/;"	m	class:sfgui::TextEdit
m_margin	object.hpp	/^	sfgui::Margin m_margin;$/;"	m	class:sfgui::Object
m_mouseHoverCallback	object.hpp	/^	void (*m_mouseHoverCallback)(); \/**< Pointer to the callback function called$/;"	m	class:sfgui::Object
m_parentRenderWindow	object.hpp	/^	sf::RenderWindow *m_parentRenderWindow; \/\/\/< Pointer to the parent sf::RenderWindow$/;"	m	class:sfgui::Object
m_phrase	error.hpp	/^    char const* m_phrase;       \/\/\/< Description of the error$/;"	m	class:sfgui::Error
m_returnPressedCallback	textedit.hpp	/^	void (*m_returnPressedCallback)(); \/\/< The return key pressed callback function pointer$/;"	m	class:sfgui::TextEdit
m_showStars	textedit.hpp	/^	bool m_showStars; \/**< Used to know if text must be replaced by stars *\/$/;"	m	class:sfgui::TextEdit
m_state	checkbox.hpp	/^		bool m_state; \/\/\/< The curent state of the checkbox (clicked or not)$/;"	m	class:sfgui::Checkbox
m_stdText	textedit.hpp	/^	std::string m_stdText;$/;"	m	class:sfgui::TextEdit
m_text	object.hpp	/^	sf::String m_text; $/;"	m	class:sfgui::Object
m_textAlignment	object.hpp	/^	int m_textAlignment;$/;"	m	class:sfgui::Object
m_textChangedCallback	textedit.hpp	/^	void (*m_textChangedCallback)(std::string &); \/\/< The textchanged callback function pointer$/;"	m	class:sfgui::TextEdit
m_tooltipTextStd	object.hpp	/^	std::string m_tooltipTextStd; \/\/\/< The std text for the tooltip message.$/;"	m	class:sfgui::Object
m_uncheckedCallback	checkbox.hpp	/^		void (*m_uncheckedCallback)();$/;"	m	class:sfgui::Checkbox
main	main.cpp	/^int main() {$/;"	f
maxValue	slider.hpp	/^	int minValue, maxValue;$/;"	m	class:Slider
minValue	slider.hpp	/^	int minValue, maxValue;$/;"	m	class:Slider
sfgui	button.hpp	/^namespace sfgui {$/;"	n
sfgui	checkbox.hpp	/^namespace sfgui {$/;"	n
sfgui	constantes.hpp	/^namespace sfgui {$/;"	n
sfgui	error.hpp	/^namespace sfgui {$/;"	n
sfgui	margin.hpp	/^namespace sfgui {$/;"	n
sfgui	object.hpp	/^namespace sfgui {$/;"	n
sfgui	textedit.hpp	/^namespace sfgui {$/;"	n
textChangeCallback	main.cpp	/^void textChangeCallback(std::string &sr) {$/;"	f
textChanged	textedit.cpp	/^void sfgui::TextEdit::textChanged() {$/;"	f	class:sfgui::TextEdit
textDeletedCallback	main.cpp	/^void textDeletedCallback(unsigned int pos, char str) {$/;"	f
unchecked	checkbox.cpp	/^void sfgui::Checkbox::unchecked() {$/;"	f	class:sfgui::Checkbox
uncheckedCallback	main.cpp	/^void uncheckedCallback(){$/;"	f
updateTextPos	object.cpp	/^void sfgui::Object::updateTextPos() {$/;"	f	class:sfgui::Object
updateTextRect	textedit.cpp	/^void sfgui::TextEdit::updateTextRect() {$/;"	f	class:sfgui::TextEdit
what	error.hpp	/^     virtual const char* what() const throw()$/;"	f	class:sfgui::Error
~Error	error.hpp	/^    virtual ~Error() throw()$/;"	f	class:sfgui::Error
~Object	object.cpp	/^sfgui::Object::~Object() {$/;"	f	class:sfgui::Object
